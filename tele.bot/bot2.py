# # import telebot

# # TOKEN = '8380704178:AAFB77wwNAGOh4CHgRix_1Q8z1w72Tz2eWI'
# # bot = telebot.TeleBot(TOKEN)

# # # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# # keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
# # button1 = telebot.types.KeyboardButton('gucci')
# # button2 = telebot.types.KeyboardButton('perfume')
# # button3 = telebot.types.KeyboardButton('Video-Nike')
# # button4 = telebot.types.KeyboardButton('Help')
# # button5 = telebot.types.KeyboardButton('Audio')
# # keyboard.add(button1, button2, button3, button4, button5)

# # @bot.message_handler(commands=['start'])
# # def start(message):
# #     bot.send_message(message.chat.id, "Welcome to my shopping bot!", reply_markup=keyboard)

# # @bot.message_handler(func=lambda message: message.text == 'gucci')
# # def send_gucci(message):
# #     try:
# #         with open('photo_2025-07-31_17.jpg', 'rb') as img:
# #             bot.send_photo(message.chat.id, img, caption="This is the first shirt. Nice!")
# #     except FileNotFoundError:
# #         bot.send_message(message.chat.id, "–§–æ—Ç–æ gucci –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

# # @bot.message_handler(func=lambda message: message.text == 'perfume')
# # def send_perfume(message):
# #     try:
# #         with open('photo_2025-07-31_17-52-52.jpg', 'rb') as img:
# #             bot.send_photo(message.chat.id, img, caption="–±—É–ª –∂–∞–Ω—ã –¥—É—Ö–∏ –æ–∫—à–æ–π—Ç!")
# #     except FileNotFoundError:
# #         bot.send_message(message.chat.id, "–§–æ—Ç–æ perfume –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

# # @bot.message_handler(func=lambda message: message.text == 'Video-Nike')
# # def send_video_nike(message):
# #     try:
# #         with open('–ê–î–õ–ò–ù - No Love.mp3', 'rb') as vid:
# #             bot.send_video(message.chat.id, vid, caption="–≠—Ç–æ –≤–∏–¥–µ–æ.")
# #     except FileNotFoundError:
# #         bot.send_message(message.chat.id, "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

# # @bot.message_handler(func=lambda message: message.text == 'Help')
# # def send_help(message):
# #     bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã.")

# # @bot.message_handler(func=lambda message: message.text == 'Audio')
# # def save_audio(message):
# #     bot.send_message(message.chat.id, "–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

# # bot.infinity_polling()


# import random
# from telebot import Bot, Dispatcher, types, executor

# API_TOKEN = 'YOUR_TOKEN_HERE'

# bot = Bot(token=API_TOKEN)
# dp = Dispatcher(bot)

# words = {
#     "apple": "—è–±–ª–æ–∫–æ",
#     "house": "–¥–æ–º",
#     "dog": "—Å–æ–±–∞–∫–∞",
#     "sun": "—Å–æ–ª–Ω—Ü–µ"
# }

# user_stats = {}

# @dp.message_handler(commands=['word'])
# async def send_word(message: types.Message):
#     word, translation = random.choice(list(words.items()))
#     await message.answer(f"{word} ‚Äî {translation}")

# @dp.message_handler(commands=['quiz'])
# async def quiz(message: types.Message):
#     word, correct = random.choice(list(words.items()))
#     options = random.sample(list(words.values()), 3)
#     if correct not in options:
#         options[random.randint(0, 2)] = correct
#     user_stats[message.from_user.id] = {"word": word, "correct": correct}
#     await message.answer(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: *{word}*?\n–í–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(options))

# @dp.message_handler(commands=['answer'])
# async def check_answer(message: types.Message):
#     user_id = message.from_user.id
#     if user_id not in user_stats:
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å /quiz.")
#         return
#     user_answer = message.get_args().strip()
#     correct = user_stats[user_id]["correct"]
#     if user_answer.lower() == correct.lower():
#         await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
#     else:
#         await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")
#     del user_stats[user_id]

# @dp.message_handler(commands=['stats'])
# async def stats(message: types.Message):
#     # –ü—Ä–∏–º–µ—Ä ‚Äî –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—á–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
#     await message.answer("–ü–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ üòÖ")

#     user_game_data = {}

# @dp.message_handler(commands=['startgame'])
# async def start_game(message: types.Message):
#     user_id = message.from_user.id
#     number = random.randint(1, 100)
#     user_game_data[user_id] = number
#     await message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")

# @dp.message_handler(commands=['guess'])
# async def guess(message: types.Message):
#     user_id = message.from_user.id
#     if user_id not in user_game_data:
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å /startgame.")
#         return
#     try:
#         guess = int(message.get_args())
#     except ValueError:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /guess.")
#         return

#     secret = user_game_data[user_id]
#     if guess < secret:
#         await message.answer("–ú–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ üìà")
#     elif guess > secret:
#         await message.answer("–ú–æ—ë —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ üìâ")
#     else:
#         await message.answer("üéâ –£–≥–∞–¥–∞–ª! –ú–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ —Å /startgame.")
#         del user_game_data[user_id]

# @dp.message_handler(commands=['reset'])
# async def reset_game(message: types.Message):
#     user_id = message.from_user.id
#     if user_id in user_game_data:
#         del user_game_data[user_id]
#     await message.answer("–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í–≤–µ–¥–∏ /startgame —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

import os
import random
from telebot import TeleBot, types

API_TOKEN = '8394322334:AAE_9ssGuMblNBkgerLIvVZtrfSbjYQU0SM'

bot = TeleBot(API_TOKEN)

# --- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —É—á–∏—Ç–µ–ª—å ---
words = {
    "apple": "—è–±–ª–æ–∫–æ",
    "house": "–¥–æ–º",
    "dog": "—Å–æ–±–∞–∫–∞",
    "sun": "—Å–æ–ª–Ω—Ü–µ"
}

user_stats = {}
user_game_data = {}

@bot.message_handler(commands=['word'])
def send_word(message):
    word, translation = random.choice(list(words.items()))
    bot.send_message(message.chat.id, f"{word} ‚Äî {translation}")

@bot.message_handler(commands=['quiz'])
def quiz(message):
    word, correct = random.choice(list(words.items()))
    options = random.sample(list(words.values()), 3)
    if correct not in options:
        options[random.randint(0, 2)] = correct
    user_stats[message.from_user.id] = {"word": word, "correct": correct}
    bot.send_message(
        message.chat.id,
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: *{word}*?\n–í–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(options),
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['answer'])
def check_answer(message):
    user_id = message.from_user.id
    if user_id not in user_stats:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å /quiz.")
        return
    user_answer = message.text.replace('/answer', '').strip()
    correct = user_stats[user_id]["correct"]
    if user_answer.lower() == correct.lower():
        bot.send_message(message.chat.id, " –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, f" –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")
    del user_stats[user_id]

@bot.message_handler(commands=['stats'])
def stats(message):
    # –ü—Ä–∏–º–µ—Ä ‚Äî –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—á–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    bot.send_message(message.chat.id, "–ü–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ üòÖ")

# --- –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ" ---
@bot.message_handler(commands=['startgame'])
def start_game(message):
    user_id = message.from_user.id
    number = random.randint(1, 100)
    user_game_data[user_id] = number
    bot.send_message(message.chat.id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")

@bot.message_handler(commands=['guess'])
def guess(message):
    user_id = message.from_user.id
    if user_id not in user_game_data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å /startgame.")
        return
    try:
        guess = int(message.text.replace('/guess', '').strip())
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /guess.")
        return

    secret = user_game_data[user_id]
    if guess < secret:
        bot.send_message(message.chat.id, "–ú–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ ")
    elif guess > secret:
        bot.send_message(message.chat.id, "–ú–æ—ë —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ ")
    else:
        bot.send_message(message.chat.id, "üéâ –£–≥–∞–¥–∞–ª! –ú–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ —Å /startgame.")
        del user_game_data[user_id]

@bot.message_handler(commands=['reset'])
def reset_game(message):
    user_id = message.from_user.id
    if user_id in user_game_data:
        del user_game_data[user_id]
    bot.send_message(message.chat.id, "–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í–≤–µ–¥–∏ /startgame —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
UPLOADS_DIR = "uploads"
if not os.path.exists(UPLOADS_DIR):
    os.makedirs(UPLOADS_DIR)

@bot.message_handler(content_types=['photo', 'document'])
def handle_files(message):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        file_ext = '.jpg'
        file_name = f"photo_{message.from_user.id}_{message.message_id}{file_ext}"
    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        file_name = message.document.file_name or f"document_{message.from_user.id}_{message.message_id}"
    else:
        return

    downloaded_file = bot.download_file(file_info.file_path)
    file_path = os.path.join(UPLOADS_DIR, file_name)
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)

    bot.send_message(message.chat.id, "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

bot.polling(none_stop=True)
























